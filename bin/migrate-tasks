#!/usr/bin/env zsh
# Migration script for unified task management system
# Converts existing tasks from various formats to the new unified system

set -euo pipefail

VAULT_TASKS="$VAULT_PATH/02-Projects/TaskManager/tasks"
BACKUP_DIR="$HOME/tasks-backup-$(date +%Y%m%d-%H%M%S)"
FINFIXER_TASKS="/Users/mh/Developer/python/FinFixer/docs/tasks"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

info() { echo -e "${BLUE}Info: $*${NC}"; }
success() { echo -e "${GREEN}Success: $*${NC}"; }
warn() { echo -e "${YELLOW}Warning: $*${NC}"; }
error() { echo -e "${RED}Error: $*${NC}" >&2; }

# Create backup
create_backup() {
    info "Creating backup at: $BACKUP_DIR"
    mkdir -p "$BACKUP_DIR"
    
    # Backup existing tasks directory
    [[ -d "$VAULT_TASKS" ]] && cp -r "$VAULT_TASKS" "$BACKUP_DIR/current-tasks" 2>/dev/null || true
    
    # Backup FinFixer tasks
    [[ -d "$FINFIXER_TASKS" ]] && cp -r "$FINFIXER_TASKS" "$BACKUP_DIR/finfixer-tasks" 2>/dev/null || true
    
    success "Backup created successfully"
}

# Get next available task ID
get_next_task_id() {
    local max_id=0
    
    for file in "$VAULT_TASKS"/TASK-*.md; do
        [[ -f "$file" ]] || continue
        local id=$(basename "$file" | sed -n 's/TASK-\([0-9]\+\)-.*/\1/p')
        [[ -n "$id" ]] && ((id > max_id)) && max_id=$id
    done
    
    printf "%03d" $((max_id + 1))
}

# Convert FinFixer task to unified format
convert_finfixer_task() {
    local source_file="$1"
    local source_dir="$2"  # active, completed, backlog
    local filename=$(basename "$source_file" .md)
    local task_id="TASK-$(get_next_task_id)"
    local date=$(date +%Y-%m-%d)
    
    # Determine status from directory
    local status="Planned"
    case "$source_dir" in
        "active") status="Active" ;;
        "completed") status="Completed" ;;
        "backlog") status="Planned" ;;
    esac
    
    # Extract title from filename (remove prefixes)
    local title=$(echo "$filename" | sed 's/^[a-z-]*-//' | tr '-' ' ' | sed 's/\b\w/\U&/g')
    
    # Create new task file
    local target_file="$VAULT_TASKS/$task_id-$filename.md"
    
    cat > "$target_file" << EOF
---
id: $task_id
title: "$title"
status: $status
priority: Medium
created: $date
updated: $date
tags: [migration, finfixer]
project: "FinFixer"
---

# $task_id - $title

## Description
Migrated from FinFixer task system.

$(grep -A 999 "^## Description" "$source_file" 2>/dev/null || echo "Original task content:")

## Acceptance Criteria
$(grep -A 999 "^## Acceptance Criteria" "$source_file" 2>/dev/null | grep -B 999 "^## " | head -n -1 || echo "- [ ] Complete migration verification")

## Progress Tracking
**Status**: $status - $([ "$status" = "Completed" ] && echo "100%" || echo "0%")

## Context
- **Original file**: $source_file
- **Original directory**: $source_dir
- **Migration date**: $date

## Progress Log
### $date
- Migrated from FinFixer task system
- Original status: $source_dir
- Preserving original context and requirements

EOF
    
    # Append original content if it exists
    if [[ -f "$source_file" ]]; then
        echo -e "\n---\n\n## Original Content\n" >> "$target_file"
        cat "$source_file" >> "$target_file"
    fi
    
    info "Migrated: $filename -> $task_id"
}

# Migrate FinFixer tasks
migrate_finfixer_tasks() {
    [[ ! -d "$FINFIXER_TASKS" ]] && { warn "FinFixer tasks directory not found: $FINFIXER_TASKS"; return; }
    
    info "Migrating FinFixer tasks..."
    
    # Migrate from each directory
    for dir in "active" "completed" "backlog"; do
        local source_dir="$FINFIXER_TASKS/$dir"
        [[ ! -d "$source_dir" ]] && continue
        
        info "Processing $dir tasks..."
        for task_file in "$source_dir"/*.md; do
            [[ -f "$task_file" ]] || continue
            [[ "$(basename "$task_file")" == "_index.md" ]] && continue
            
            convert_finfixer_task "$task_file" "$dir"
        done
    done
}

# Update gitignore for new tasks directory
update_gitignore() {
    local gitignore="$HOME/.gitignore"
    
    if [[ -f "$gitignore" ]]; then
        if ! grep -q "^!tasks/$" "$gitignore" 2>/dev/null; then
            info "Adding tasks directory to .gitignore whitelist"
            echo -e "\n# Unified task management system\n!tasks/\n!bin/task\n!bin/migrate-tasks" >> "$gitignore"
        fi
    fi
}

# Generate summary
generate_summary() {
    local task_count=$(find "$VAULT_TASKS" -name "TASK-*.md" | wc -l | tr -d ' ')
    
    cat << EOF

$GREEN==========================================
Task Migration Summary
==========================================$NC

$BLUE• Total tasks migrated: $task_count
• Backup location: $BACKUP_DIR
• Tasks directory: $VAULT_TASKS
• CLI tool: ~/bin/task$NC

$YELLOW• Next steps:
  1. Review migrated tasks: task list
  2. Update task details as needed: task update TASK-XXX
  3. Add tasks directory to dotfiles tracking
  4. Test Obsidian integration$NC

$GREEN• Migration completed successfully!$NC

EOF
}

main() {
    info "Starting task migration to unified system..."
    
    # Create backup
    create_backup
    
    # Ensure tasks directory exists
    mkdir -p "$VAULT_TASKS"
    
    # Migrate from different systems
    migrate_finfixer_tasks
    
    # Update gitignore
    update_gitignore
    
    # Regenerate task index
    if command -v ~/bin/task >/dev/null 2>&1; then
        ~/bin/task index
    fi
    
    # Generate summary
    generate_summary
}

main "$@"
