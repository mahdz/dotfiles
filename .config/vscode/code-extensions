#!/usr/bin/env bash

### code-extensions.sh
#
# Backup, install, or force update all VS Code extensions.
#
# Usage:
#     $ ./code-extensions install
#     $ ./code-extensions dump
#     $ ./code-extensions update
#
###

# Strict mode for better error handling and security
#set -euo pipefail
set -x

# Environment variaibles and paths
script_name="${BASH_SOURCE[0]}"
config_dir="$(command dirname -- "${script_name}")"
VSCODE_PORTABLE="${VSCODE_PORTABLE:-${HOME}/.local/share/code-portable-data/user-data}"
VSCODE_EXTENSIONS="${VSCODE_EXTENSIONS:-${HOME}/.local/share/code-portable-data/extensions}"

# Get list of currently installed extensions
extensions=$(code --list-extensions)
extensions_file=${config_dir}/extensions

# Function to install extensions from a file
install() {

  # Install extensions
  if [[ ! -f "$extensions_file" ]]; then
    echo "Error: Extension list file not found: $extensions_file" >&2
    exit 1
  fi

  echo "Installing extensions..."
  while read -r ext; do
    # Skip empty lines and comments
    [[ -z "$ext" || "$ext" == \#* ]] && continue
    code --install-extension "$ext"
  done <"$extensions_file"
  echo "✔ Extension installation complete."

  # add cron job to update extensions list once a day
  crontab -l | sed '/code-extensions dump/d' > mycron
  echo "0 0 * * * ~/.config/vscode/code-extensions dump" > mycron
  crontab mycron
  rm mycron

}

# Function to dump currently installed extensions
dump() {
  echo "Saving current extensions to $extensions_file..."
  echo "$extensions" | sort -u >"$extensions_file" || {
    echo "Error: Failed to save extensions." >&2
    exit 1
  }
  echo "✔ Extensions saved successfully."
}

# Function to update extensions
update() {
  # Print a message to indicate that the extension update process starts
  printf "[INFO] start: updating installed extensions..."
  sleep 0.5

  # Print a message to indicate that the extension update process starts
  printf "[INFO] start: vscode extension updating."
  sleep 0.5

  # Define a spinner animation
  spiner_figs='-\\|/'
  spiner_i=0

  # Clear VSIX cache
  if [ -d "${VSCODE_PORTABLE}/CachedExtensionVSIXs" ] && [ -n "$(ls -A ${VSCODE_PORTABLE}/CachedExtensionVSIXs)" ]; then
    rm -rf "${VSCODE_PORTABLE}/CachedExtensionVSIXs"/*
  fi

  # Loop through provided extension names
  for ext in $extensions; do
    echo "[INFO] Removing extension: $ext "
    find "${VSCODE_EXTENSIONS}" -maxdepth 1 -type d -name "${ext}*" -exec rm -rf {} \;

    # Print a message to show an extension being updated
    spiner_i=$(((spiner_i + 1) % 4))
    printf "\33[2K\r"
    printf "[INFO] (${spiner_figs:$spiner_i:1}) Reinstalling: ${ext} "

    code --install-extension "$ext" --force
  done

  # Print a message to indicate that the extension update process has completed
  printf "\33[2K\r"
  echo "[INFO] ✔ vscode extension updating."
}

### ALT update code
#
# if [ -n "$(ls -A ${USERPROFILE}/AppData/Roaming/Code/CachedExtensionVSIXs)" ]; then
#     echo "## Emptying VSIX cache"
#     USERPROFILE_CLEAN=$(echo ${USERPROFILE} | sed 's|\\|/|g')
#     rm ${USERPROFILE_CLEAN}/AppData/Roaming/Code/CachedExtensionVSIXs/*
# else
#     echo "## VSIX cache is empty"
# fi

# for ext in "$@"
# do
#     echo "## Removing extension ${ext}"
#     find ${USERPROFILE}/.vscode/extensions -maxdepth 1 -type d -name "${ext}*" -exec rm -r "{}" \;
#     echo "## Reinstalling extension for update"
#     echo "$(code --install-extension "${ext}" --force)"
# done
#
###

# Allow function call from command line
"$@"
